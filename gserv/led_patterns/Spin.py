import threading


class SpinPattern():
  def __init__(self, parent, pattern_name, config):
    self.parent = parent
    self.config = config
    self.pattern_name = pattern_name
    self.patterns = {
      "GREEN_CLOCKWISE": [[0x05, 0x00, 0x00], [0x08, 0x00, 0x00], [0x0C, 0x00, 0x00], [0x13, 0x00, 0x00],
        [0x1D, 0x00, 0x00], [0x2C, 0x00, 0x00], [0x42, 0x00, 0x00], [0x64, 0x00, 0x00]],
      "GREEN_COUNTERCLOCKWISE": [[0x64, 0x00, 0x00], [0x42, 0x00, 0x00], [0x2C, 0x00, 0x00], [0x1D, 0x00, 0x00],
        [0x13, 0x00, 0x00], [0x0C, 0x00, 0x00], [0x08, 0x00, 0x00], [0x05, 0x00, 0x00]],
      "RED_CLOCKWISE": [[0x00, 0x05, 0x00], [0x00, 0x08, 0x00], [0x00, 0x0C, 0x00], [0x00, 0x13, 0x00],
        [0x00, 0x1D, 0x00], [0x00, 0x2C, 0x00], [0x00, 0x42, 0x00], [0x00, 0x64, 0x00]],
      "RED_COUNTERCLOCKWISE": [[0x00, 0x64, 0x00], [0x00, 0x42, 0x00], [0x00, 0x2C, 0x00], [0x00, 0x1D, 0x00],
        [0x00, 0x13, 0x00], [0x00, 0x0C, 0x00], [0x00, 0x08, 0x00], [0x00, 0x05, 0x00]],
      "BLUE_CLOCKWISE": [[0x00, 0x00, 0x05], [0x00, 0x00, 0x08], [0x00, 0x00, 0x0C], [0x00, 0x00, 0x13],
        [0x00, 0x00, 0x1D], [0x00, 0x00, 0x2C], [0x00, 0x00, 0x42], [0x00, 0x00, 0x64]],
      "BLUE_COUNTERCLOCKWISE": [[0x00, 0x00, 0x64], [0x00, 0x00, 0x42], [0x00, 0x00, 0x2C], [0x00, 0x00, 0x1D],
        [0x00, 0x00, 0x13], [0x00, 0x00, 0x0C], [0x00, 0x00, 0x08], [0x00, 0x00, 0x05]],
      "CYAN_CLOCKWISE": [[0x05, 0x00, 0x05], [0x08, 0x00, 0x08], [0x0C, 0x00, 0x0C], [0x13, 0x00, 0x13],
        [0x1D, 0x00, 0x1D], [0x2C, 0x00, 0x2C], [0x42, 0x00, 0x42], [0x64, 0x00, 0x64]],
      "CYAN_COUNTERCLOCKWISE": [[0x64, 0x00, 0x64], [0x42, 0x00, 0x42], [0x2C, 0x00, 0x2C], [0x1D, 0x00, 0x1D],
        [0x13, 0x00, 0x13], [0x0C, 0x00, 0x0C], [0x08, 0x00, 0x08], [0x05, 0x00, 0x05]]
    }
    self.timer = None
    self.current_color = None
    if pattern_name in self.patterns:
      self.current_color = self.patterns[self.pattern_name]
    self.timer_period = 0.15
    self.stop_run = False

  def start(self):
    self._write_leds()

  def stop(self):
    self.stop_run = True
    if self.timer:
      self.timer.cancel()

  def _write_leds(self):
    if self.stop_run:
      return

    if self.current_color is not None:
      for l in self.current_color:
        for x in range(0, 2):
          l[x] = int(l[x] / 1.5)
          if l[x] != 0 and l[x] < 4:
            l[x] = 0x64

      self.timer_period = .15
      self.parent.writeSPIData(self.current_color)
      self.timer = threading.Timer(self.timer_period, self._write_leds).start()
